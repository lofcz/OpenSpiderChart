<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ngon = 3;
len  = 50;
times = 5;
fillAll = false;

maxValue = 1000;
for (var i = 0; i &lt; 20; i++)
    {
     val[i] = irandom_range(1, 10) * 100;
     dVal[i] = val[i];
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var angle = 0;

var tempLen = len;
for (var j = 0; j &lt; times; j++)
{ 
for (var i = 0; i &lt; ngon; i++)
    {
     var retArray = draw_line_angle(x, y, tempLen, angle, 3);
     if (i == 0) {var startArray = retArray;}
     angle += (360 / ngon);
     
     if (i &gt; 0) 
        {
         draw_line(retArray[0], retArray[1], prevArray[0], prevArray[1]);
         if (i == ngon - 1) {draw_line(retArray[0], retArray[1], startArray[0], startArray[1]);}
        }
        
     if (j == times - 1)
        {    
        var oX = cos(degtorad(angle)) * (25);
        var oY = sin(degtorad(angle)) * (25);
        
        draw_text(retArray[0] + oX, retArray[1] + oY, string(i));
        
        draw_set_color(c_red);
        var tempX = x + cos(degtorad(angle)) *  dVal[i] / maxValue * (tempLen);
        var tempY = y + sin(degtorad(angle)) *  dVal[i] / maxValue * (tempLen);
        
        if (i == 0) {startX = tempX; startY = tempY;}

        draw_set_color(c_black);        
        if (i &gt; 0)
           {
            draw_set_color(c_red);
            draw_set_alpha(0.5);
            draw_triangle(x, y, tempX, tempY, prevTempX, prevTempY, false); 
            if (i == ngon - 1) {draw_triangle(x, y, tempX, tempY, startX, startY, false);}
            draw_set_color(c_black);
            draw_set_alpha(1);
           }
         
        prevTempX = tempX;
        prevTempY = tempY; 
        }
        
     var prevArray = retArray;          
    }
tempLen += len;
}  

for (var i = 0; i &lt; array_length_1d(val); i++)
    {
     if (fillAll) {val[i] = maxValue;}
     dVal[i] = lerp(dVal[i], val[i], 0.1);
    }
    
if (mouse_check_button_pressed(mb_left))  {ngon++;}
if (mouse_check_button_pressed(mb_right)) {var index = irandom_range(0, ngon - 1); val[index] += 100; val[index] = clamp(val[index], 0, maxValue);}
if (mouse_check_button_pressed(mb_middle)) {fillAll = !fillAll;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
